class Dropdown {    private elements = {};    constructor(private widget: HTMLElement) {        if(this.widget === null) {            return;        }        this.init();    }    private init(): void {         this.elements.container = this.widget;         this.elements.selectedElement = this.widget.querySelector("div:first-child");         this.elements.options = this.widget.querySelector(".options");         this.elements.optionArray = this.widget.querySelectorAll(".option");         this.elements.currentOptionIndex = -1;         this.indexOptions();         this.addEventHandlers();         this.exposeApis();    }    /**    * Attach methods on the dropdown DOM element so that it can be used by other    * components of a page.    */    private exposeApis(): void {        this.widget.toggleDropdown = () => { this.toggleDropdown()};    }    private addEventHandlers(): void {       this.keyOptions();       this.mouseOptions();    }    private keyOptions(): void {        document.body.addEventListener("keydown", (e) => {            // logic for tab keys            const keyCode = e.keyCode;            switch(keyCode) {                case 9:                    this.focusNext();                    break;                case 37:                 // left arrow key                case 38:                    // up arrow                    this.highlightPreviousOption();                    break;                case 39:                // right arrow                case 40:                    // down arrow                    this.highlightNextOption();                    break;                case 13:                    // enter key                    this.setSelectedOption();                    break;                default:                    // for shift tab key                    if(e.shiftKey && keyCode === 9) {                        this.focusPrevious();                    }            }        });    }    private mouseOptions(): void {        this.elements.selectedElement.addEventListener("click", () => {            this.toggleDropdown();        });        this.addClickHandlers();        this.addHoverEffect();    }    private addClickHandlers(): void {        for (let i = 0; i < this.elements.optionArray.length; i++) {            const option = this.elements.optionArray[i];            option.addEventListener("click", (e) => {               const target = e.target;               if (target !== null && !target.classList.contains("option")) {                return;               }               // find current index of clicked item               this.elements.currentOptionIndex = parseInt(option.getAttribute("index") || "");               this.activateCurrentOption();               this.setSelectedOption();            });        }    }    private addHoverEffect(): void {        for (let i = 0; i < this.elements.optionArray.length; i++) {            const option = this.elements.optionArray[i];            option.addEventListener("mouseover", (e) => {               const target = e.target;               if (target !== null && !target.classList.contains("option")) {                return;               }               // find current index of hovered item               this.elements.currentOptionIndex = parseInt(option.getAttribute("index") || "");               this.activateCurrentOption();            });        }    }    private toggleDropdown(): void {        if (this.elements.options !== null) {            this.elements.options.classList.toggle("open");        }    }    private highlightPreviousOption(): void {        // add class name active on previous option        if (this.elements.currentOptionIndex <= 0) {            // initially, if nothing is selected and up arrow or left arrow is prssed, select last option            this.elements.currentOptionIndex = this.elements.optionArray.length - 1;        } else {             this.elements.currentOptionIndex--;        }         this.activateCurrentOption();    }    private highlightNextOption(): void {        // add class name active on next option        if (this.elements.currentOptionIndex >= this.elements.optionArray.length -1) {            this.elements.currentOptionIndex = 0;        } else {             this.elements.currentOptionIndex++;        }        this.activateCurrentOption();    }    private activateCurrentOption(): void {        this.clearOptions();        const option = this.elements.optionArray[this.elements.currentOptionIndex];        option.classList.add("active");    }    private setSelectedOption(): void {        const option = this.elements.optionArray[this.elements.currentOptionIndex];        if (option !== undefined) {            this.elements.selectedElement.innerHTML = option.innerHTML;            this.closeDropdown();        }    }    private focusNext(): void {    }    private focusPrevious(): void {    }    private indexOptions(): void {        // add index number in each option        for(let i = 0; i < this.elements.optionArray.length; i++) {            const option = this.elements.optionArray[i];            option.setAttribute("index", i);        }    }    private clearOptions(): void {        for(let i = 0; i < this.elements.optionArray.length; i++) {            const option = this.elements.optionArray[i];            if (option !== null) {                option.classList.remove("active");            }        }    }    private closeDropdown(): void {        this.elements.options.classList.remove("open");    }} // init all dropdowns const dropdowns = document.querySelectorAll(".selectDropdown"); for (let i = 0; i < dropdowns.length; i++) {    const dropdown = dropdowns[i] as HTMLElement;    new Dropdown(dropdown); }